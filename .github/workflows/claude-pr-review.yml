name: Claude Issue Response

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  respond-to-mention:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.body, '@claude') ||
      contains(github.event.comment.body, '@claude')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Analyze and Respond
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const issue = context.payload.issue;
            const comment = context.payload.comment;
            const content = comment ? comment.body : issue.body;
            const lowerContent = content.toLowerCase();
            
            let response = [];
            
            if (lowerContent.includes('state')) {
              response.push('üîç Analyzing Toggle Button State Management...\n');
              
              try {
                // Debug current directory
                const lsOutput = execSync('ls -R', { encoding: 'utf8' });
                response.push('üìÇ Repository contents:\n```\n' + lsOutput + '\n```\n');
                
                // Look for toggle button files
                const findCmd = "find . -type f \\( -name '*.tsx' -o -name '*.jsx' -o -name '*.ts' -o -name '*.js' \\)";
                const files = execSync(findCmd, { encoding: 'utf8' }).split('\n').filter(Boolean);
                
                response.push(`Found ${files.length} code files to analyze:\n`);
                response.push('```');
                files.forEach(file => response.push(file));
                response.push('```\n');
                
                const toggleFiles = files.filter(file => {
                  try {
                    const content = fs.readFileSync(file, 'utf8');
                    return content.toLowerCase().includes('toggle') || content.toLowerCase().includes('switch');
                  } catch (error) {
                    response.push(`‚ö†Ô∏è Error reading ${file}: ${error.message}`);
                    return false;
                  }
                });
                
                if (toggleFiles.length > 0) {
                  response.push('\nüìÅ Found toggle button implementations:');
                  
                  for (const file of toggleFiles) {
                    const content = fs.readFileSync(file, 'utf8');
                    response.push(`\n**${file}**`);
                    
                    // Check state management
                    const stateChecks = {
                      'useState': 'Basic state management',
                      'useReducer': 'Complex state management',
                      'useContext': 'Global state management',
                      'onChange': 'State change handlers',
                      'setState': 'Class component state',
                      'interface': 'TypeScript type definitions',
                      'onClick': 'Click event handlers'
                    };
                    
                    for (const [pattern, description] of Object.entries(stateChecks)) {
                      if (content.includes(pattern)) {
                        response.push(`‚úÖ ${description}`);
                      }
                    }
                    
                    // Code quality checks
                    if (!content.includes('interface') && !content.includes('type')) {
                      response.push('‚ö†Ô∏è Missing TypeScript type definitions');
                    }
                    if (!content.includes('onChange') && !content.includes('onClick')) {
                      response.push('‚ö†Ô∏è Missing state change handlers');
                    }
                  }
                  
                  response.push('\n**Recommendations:**');
                  response.push('1. Ensure proper state initialization');
                  response.push('2. Add TypeScript interfaces/types');
                  response.push('3. Implement change handlers');
                  response.push('4. Consider state persistence');
                  
                } else {
                  response.push('\n‚ö†Ô∏è No toggle button implementations found.');
                  response.push('\nPlease ensure that:');
                  response.push('1. Toggle button code is in this repository');
                  response.push('2. Files use .tsx, .jsx, .ts, or .js extensions');
                  response.push('3. Components contain "toggle" or "switch" in their code');
                  response.push('\nRecommended locations:');
                  response.push('- `uigen/src/components/`');
                  response.push('- `uigen/src/features/`');
                }
                
              } catch (error) {
                response.push('‚ùå Error analyzing code:');
                response.push(error.message);
                response.push('\nPlease ensure the repository is accessible.');
              }
              
            } else {
              response = [
                'üëã I can help analyze your toggle button! What would you like me to check?',
                '',
                'Choose a command:',
                '- "@claude check state" - Analyze state management',
                '- "@claude check events" - Review event handling',
                '- "@claude check ui" - Examine UI/UX',
                '- "@claude check accessibility" - Verify accessibility',
                '',
                'Let me know which aspect to focus on!'
              ];
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: response.join('\n')
            });