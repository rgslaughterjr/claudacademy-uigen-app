name: Claude Issue Response

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  respond-to-mention:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.body, '@claude') ||
      contains(github.event.comment.body, '@claude')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Debug Workspace
        run: |
          pwd
          ls -la
          echo "---"
          ls -la uigen || echo "uigen directory not found"

      - name: Analyze and Respond
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const comment = context.payload.comment;
            const content = comment ? comment.body : issue.body;
            
            let response = "";
            
            // Check if we're analyzing state management
            if (content.toLowerCase().includes('state')) {
              response = `Analyzing toggle button state management üîÑ

              **Code Analysis Results:**
              `;
              
              try {
                // List all relevant files
                const { execSync } = require('child_process');
                const findCmd = "find . -type f -name '*.tsx' -o -name '*.jsx' -o -name '*.ts' -o -name '*.js'";
                const files = execSync(findCmd, { encoding: 'utf8' }).split('\n').filter(Boolean);
                
                response += `\nFound ${files.length} potential files to analyze.\n`;
                
                let toggleFiles = [];
                
                // Find toggle-related files
                for (const file of files) {
                  try {
                    const content = require('fs').readFileSync(file, 'utf8');
                    if (content.includes('toggle') || content.includes('switch')) {
                      toggleFiles.push(file);
                      response += `\nüìÑ Found toggle implementation in \`${file}\`:\n`;
                      
                      // Check state management
                      if (content.includes('useState')) {
                        response += '‚úÖ Uses React useState hook\n';
                      }
                      if (content.includes('useReducer')) {
                        response += '‚úÖ Uses React useReducer hook\n';
                      }
                      if (content.includes('useContext')) {
                        response += '‚úÖ Uses React Context\n';
                      }
                      
                      // Check props/types
                      if (content.includes('interface') || content.includes('type')) {
                        response += '‚úÖ Has TypeScript definitions\n';
                      }
                    }
                  } catch (error) {
                    console.error(`Error reading ${file}:`, error);
                  }
                }
                
                if (toggleFiles.length === 0) {
                  response += '\n‚ö†Ô∏è No toggle button implementations found. Make sure:\n';
                  response += '1. The code is committed\n';
                  response += '2. Files use .tsx, .jsx, .ts, or .js extensions\n';
                  response += '3. Components contain "toggle" or "switch" in their code\n';
                }
                
              } catch (error) {
                response += '\n‚ùå Error analyzing code: ' + error.message + '\n';
                response += 'Please check that the repository is properly cloned and accessible.\n';
              }
            } else {
              // Default response for other mentions
              response = `üëã I can help analyze your toggle button implementation. Please specify what you'd like me to check:

              1. Type "@claude check state management" - I'll analyze state handling
              2. Type "@claude check events" - I'll check event handling
              3. Type "@claude check ui" - I'll review UI/UX
              4. Type "@claude check accessibility" - I'll verify accessibility features`;
            }
            
            // Always post a response
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: response.replace(/^ +/gm, '') // Remove leading spaces
            });