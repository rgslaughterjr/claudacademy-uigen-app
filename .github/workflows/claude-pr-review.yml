name: Claude Issue Response

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

env:
  TOGGLE_INITIAL_RESPONSE: |
    I'll help verify the toggle button functionality:

    üîç Areas to check:
    1. State management
    2. Event handling
    3. UI/UX consistency
    4. Browser compatibility
    5. Accessibility compliance

    Would you like me to start with any specific aspect?

  STATE_MANAGEMENT_RESPONSE: |
    Analyzing toggle button state management üîÑ

    **Initial Checklist:**
    - [ ] State initialization
    - [ ] Click state updates
    - [ ] State persistence
    - [ ] Props management
    - [ ] State synchronization

    Let me check the implementation...

jobs:
  respond-to-mention:
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.body, '@claude') ||
      contains(github.event.comment.body, '@claude')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Search and Analyze Code
        id: analyze
        run: |
          # Find toggle button files
          echo "Looking for toggle button implementations..."
          TOGGLE_FILES=$(find . -type f \( -name "*.tsx" -o -name "*.jsx" -o -name "*.ts" -o -name "*.js" \) -exec grep -l "toggle" {} \;)
          
          if [ -n "$TOGGLE_FILES" ]; then
            echo "Found toggle button files:"
            echo "$TOGGLE_FILES"
            
            # Analyze implementations
            echo "ANALYSIS<<EOF" >> $GITHUB_ENV
            echo "**Implementation Analysis:**" >> $GITHUB_ENV
            echo "" >> $GITHUB_ENV
            
            for file in $TOGGLE_FILES; do
              echo "Analyzing $file..." >> $GITHUB_ENV
              
              # Check state management
              if grep -q "useState\|useReducer" "$file"; then
                echo "‚úÖ Found state management:" >> $GITHUB_ENV
                if grep -q "useState" "$file"; then
                  echo "- Uses useState for state updates" >> $GITHUB_ENV
                fi
                if grep -q "useReducer" "$file"; then
                  echo "- Uses useReducer for complex state" >> $GITHUB_ENV
                fi
              fi
              
              # Check event handling
              if grep -q "onClick\|onChange" "$file"; then
                echo "‚úÖ Found event handlers:" >> $GITHUB_ENV
                if grep -q "onClick" "$file"; then
                  echo "- Implements click handling" >> $GITHUB_ENV
                fi
                if grep -q "onChange" "$file"; then
                  echo "- Handles state changes" >> $GITHUB_ENV
                fi
              fi
              
              echo "" >> $GITHUB_ENV
            done
            
            echo "EOF" >> $GITHUB_ENV
          else
            echo "ANALYSIS=No toggle button implementation files found. Please ensure the code is committed." >> $GITHUB_ENV
          fi

      - name: Post Response
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const comment = context.payload.comment;
            const content = comment ? comment.body : issue.body;
            const lowerContent = content.toLowerCase();
            
            let response;
            
            // Initial toggle verification request
            if (lowerContent.includes('toggle') && lowerContent.includes('verify')) {
              response = process.env.TOGGLE_INITIAL_RESPONSE;
            }
            // State management analysis
            else if (lowerContent.includes('state')) {
              response = process.env.STATE_MANAGEMENT_RESPONSE + "\n\n" + process.env.ANALYSIS;
            }
            else {
              response = process.env.TOGGLE_INITIAL_RESPONSE;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: response
            });